// <auto-generated />
using System;
using E_NompiloPhc.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_NompiloPhc.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("E_NompiloPhc.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"), 1L, 1);

                    b.Property<string>("AdditionalNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CounselorId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CounselorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.AppointmentViewModel", b =>
                {
                    b.Property<string>("AdditionalNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("CounselorId")
                        .HasColumnType("int");

                    b.Property<string>("CounselorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CounselorsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("AppointmentViewModels");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.Contraceptive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effectiveness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsageInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contraceptives");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.ContraceptiveMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EffectivenessRate")
                        .HasColumnType("float");

                    b.Property<string>("EligibilityCriteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContraceptiveMethods");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.ContraceptivePreferencesViewModel", b =>
                {
                    b.Property<string>("SelectedContraceptive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserAge")
                        .HasColumnType("int");

                    b.ToTable("ContraceptivePreferencesViewModels");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.CounselingRequestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("CounselingRequestModel");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.CounselingResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CounselingResources");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.Counselor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContactInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Counselors");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.FertilityData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("BasalBodyTemperature")
                        .HasColumnType("float");

                    b.Property<string>("CervicalMucusQuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CycleStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("FertilityData");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.FertilityDataViewModel", b =>
                {
                    b.Property<DateTime>("LastMenstrualPeriodStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenstrualCycleLength")
                        .HasColumnType("int");

                    b.ToTable("FertilityDataViewModels");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.FertilityInsights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FertileDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsightsText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FertilityInsights");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.FertilityInsightsViewModel", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FertileDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsightsText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MostFertileDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OvulationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("FertilityInsightsViewModels");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.UserInputModel", b =>
                {
                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasChildren")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMedicalCondition")
                        .HasColumnType("bit");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredContraceptiveMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Smokes")
                        .HasColumnType("bit");

                    b.ToTable("UserInputModels");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChosenContraceptiveId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfChoice")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.UserTrackingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("BasalBodyTemperature")
                        .HasColumnType("float");

                    b.Property<bool>("HasOvulationTest")
                        .HasColumnType("bit");

                    b.Property<int>("MenstrualCycleDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrackingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTrackingModels");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.GBV.CheckUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AssignedDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedMedication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BloodPressure")
                        .HasColumnType("int");

                    b.Property<int>("BodyTemperature")
                        .HasColumnType("int");

                    b.Property<string>("CheckUpNurse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OxygenLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PulseRate")
                        .HasColumnType("int");

                    b.Property<string>("Therapy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CheckUp");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.GBV.PatientMedicationRefill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AssignedDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImprintCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PatientMedicationRefill");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.GBV.PHCMedicationRefill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImprintCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationSupplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacistLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PHCMedicationRefill");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.GBV.RefillDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DeliverLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliverYesNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryArrival")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorApprover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PHCName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicationRefillDelivery");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.GBV.StaffLogTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Regular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sick")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Start")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Vacation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StaffLogTime");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.GBV.VirtualAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForVisit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Time")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VirtualAppointment");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.GBV.WalkInAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForVisit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WalkInAppointment");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.Anthropometry", b =>
                {
                    b.Property<int>("anthroID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("anthroID"), 1L, 1);

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<double>("armCircumference")
                        .HasColumnType("float");

                    b.Property<double>("bmi")
                        .HasColumnType("float");

                    b.Property<double>("calfCircumference")
                        .HasColumnType("float");

                    b.Property<double>("currentWeight")
                        .HasColumnType("float");

                    b.Property<double>("height")
                        .HasColumnType("float");

                    b.Property<double>("hipCircumference")
                        .HasColumnType("float");

                    b.Property<double>("subscapularSkinFold")
                        .HasColumnType("float");

                    b.Property<double>("tricepSkinFold")
                        .HasColumnType("float");

                    b.Property<double>("usualWeight")
                        .HasColumnType("float");

                    b.Property<double>("waistCircumference")
                        .HasColumnType("float");

                    b.HasKey("anthroID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("Antropometry");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.Biochemicals", b =>
                {
                    b.Property<int>("BioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BioID"), 1L, 1);

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<string>("SmokingFrequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("albumin")
                        .HasColumnType("float");

                    b.Property<double>("ammonia")
                        .HasColumnType("float");

                    b.Property<double>("amylase")
                        .HasColumnType("float");

                    b.Property<double>("bleedingTime")
                        .HasColumnType("float");

                    b.Property<double>("calcium")
                        .HasColumnType("float");

                    b.Property<double>("cholesterol")
                        .HasColumnType("float");

                    b.Property<double>("clottingTime")
                        .HasColumnType("float");

                    b.Property<double>("globulin")
                        .HasColumnType("float");

                    b.Property<double>("hemoglobin")
                        .HasColumnType("float");

                    b.Property<double>("lipase")
                        .HasColumnType("float");

                    b.Property<double>("magnesium")
                        .HasColumnType("float");

                    b.Property<double>("potassium")
                        .HasColumnType("float");

                    b.Property<double>("sodium")
                        .HasColumnType("float");

                    b.Property<double>("totalProtein")
                        .HasColumnType("float");

                    b.Property<double>("uricAcid")
                        .HasColumnType("float");

                    b.HasKey("BioID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("Biochemicals");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.DietaryInfo", b =>
                {
                    b.Property<int>("DietaryInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DietaryInfoID"), 1L, 1);

                    b.Property<double>("AMSnackAmount")
                        .HasColumnType("float");

                    b.Property<string>("AMSnackFood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AMSnackMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AMSnacktotalclories")
                        .HasColumnType("float");

                    b.Property<double>("BreakfastAmount")
                        .HasColumnType("float");

                    b.Property<string>("BreakfastFood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreakfastMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BreakfastTotalCalories")
                        .HasColumnType("float");

                    b.Property<double>("DinnerAmount")
                        .HasColumnType("float");

                    b.Property<string>("DinnerFood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DinnerMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DinnerTotalCalories")
                        .HasColumnType("float");

                    b.Property<double>("LunchAmount")
                        .HasColumnType("float");

                    b.Property<string>("LunchFood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LunchMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LunchTotalCalories")
                        .HasColumnType("float");

                    b.Property<double>("PMSnackAmout")
                        .HasColumnType("float");

                    b.Property<string>("PMSnackFood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PMSnackMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PMSnackTotalCalories")
                        .HasColumnType("float");

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.HasKey("DietaryInfoID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("DietaryInfo");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.FamilyH", b =>
                {
                    b.Property<int>("FamilyHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FamilyHistoryID"), 1L, 1);

                    b.Property<bool?>("Cancer")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("CardiovascularDisease")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("DiabetesMellitusType1")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("DiabetesMellitusType2")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("EndocrineDisease")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("GastrointestinalDisease")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("KidneyDisease")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("NeuromuscularDisease")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<bool?>("PulmonaryDisease")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.HasKey("FamilyHistoryID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("FamilyHistory");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.FoodExchange", b =>
                {
                    b.Property<int>("FoodExchangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodExchangeID"), 1L, 1);

                    b.Property<string>("AMSnack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Breakfast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DietDiscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DinnerSupper")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lunch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PMSnack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<int>("TotalItems")
                        .HasColumnType("int");

                    b.HasKey("FoodExchangeID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("FoodExchange");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.FoodItems", b =>
                {
                    b.Property<int>("FoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodID"), 1L, 1);

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Fat")
                        .HasColumnType("float");

                    b.Property<double>("Fiber")
                        .HasColumnType("float");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Minerals")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<double>("Protein")
                        .HasColumnType("float");

                    b.Property<string>("ServingSize")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Vitamins")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FoodID");

                    b.ToTable("FoodItems");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.MacroNutrients", b =>
                {
                    b.Property<int>("MacroID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MacroID"), 1L, 1);

                    b.Property<double>("Cho")
                        .HasColumnType("float");

                    b.Property<double>("Chon")
                        .HasColumnType("float");

                    b.Property<double>("ChongKg")
                        .HasColumnType("float");

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<double>("Fat")
                        .HasColumnType("float");

                    b.Property<int>("KCal")
                        .HasColumnType("int");

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<double>("TeriAbw")
                        .HasColumnType("float");

                    b.Property<double>("TeriCbw")
                        .HasColumnType("float");

                    b.Property<double>("TeriLbw")
                        .HasColumnType("float");

                    b.HasKey("MacroID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("MacroNutrients");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.MedicalH", b =>
                {
                    b.Property<int>("MedicalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalHistoryID"), 1L, 1);

                    b.Property<string>("FoodAllergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PastIllness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<string>("PresentIllness")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalHistoryID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("MedicalH");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.PatientInfo", b =>
                {
                    b.Property<int>("PatientInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientInfoID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AttendingDoctor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dietitian")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NextOfKin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NextOfKinNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PatientInfoID");

                    b.ToTable("PatientInfos");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.Screening", b =>
                {
                    b.Property<int>("ScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScreeningId"), 1L, 1);

                    b.Property<double>("ExtremeBMI")
                        .HasColumnType("float");

                    b.Property<int?>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<double>("ReducedIntake")
                        .HasColumnType("float");

                    b.Property<int>("RiskScore")
                        .HasColumnType("int");

                    b.Property<double>("SevereIllness")
                        .HasColumnType("float");

                    b.Property<double>("WeightLoss")
                        .HasColumnType("float");

                    b.HasKey("ScreeningId");

                    b.HasIndex("PatientInfoID")
                        .IsUnique()
                        .HasFilter("[PatientInfoID] IS NOT NULL");

                    b.ToTable("Screening");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.Screening2", b =>
                {
                    b.Property<int>("ScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScreeningId"), 1L, 1);

                    b.Property<double>("ExtremeBMI")
                        .HasColumnType("float");

                    b.Property<int?>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<double>("ReducedIntake")
                        .HasColumnType("float");

                    b.Property<int>("RiskScore")
                        .HasColumnType("int");

                    b.Property<double>("SevereIllness")
                        .HasColumnType("float");

                    b.Property<double>("WeightLoss")
                        .HasColumnType("float");

                    b.HasKey("ScreeningId");

                    b.HasIndex("PatientInfoID");

                    b.ToTable("Screening2");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.SGA", b =>
                {
                    b.Property<int>("SgaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SgaID"), 1L, 1);

                    b.Property<double>("AlbuminSGA")
                        .HasColumnType("float");

                    b.Property<double>("BMI")
                        .HasColumnType("float");

                    b.Property<bool>("EdemaPresence")
                        .HasColumnType("bit");

                    b.Property<int>("FoodIntake")
                        .HasColumnType("int");

                    b.Property<int>("FunctionalCapacity")
                        .HasColumnType("int");

                    b.Property<string>("GastrointestinalSymptom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionalRequirementDisease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<string>("PhysicalExam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TIC")
                        .HasColumnType("int");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<double>("WeightLoss")
                        .HasColumnType("float");

                    b.HasKey("SgaID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("SGA");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.SocialH", b =>
                {
                    b.Property<int>("SocialHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocialHistoryID"), 1L, 1);

                    b.Property<int>("AlcoholFrequency")
                        .HasColumnType("int");

                    b.Property<int>("AlcoholQuantity")
                        .HasColumnType("int");

                    b.Property<string>("AlcoholType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<int>("PhysActivity")
                        .HasColumnType("int");

                    b.Property<int>("SmokingFrequency")
                        .HasColumnType("int");

                    b.HasKey("SocialHistoryID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique()
                        .HasFilter("[PatientInfoID] IS NOT NULL");

                    b.ToTable("SocialHistory");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.PatientViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("patientViewModels");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int?>("ExchangeCurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("smallmoney");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeCurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.HealthProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("HealthProviders");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.MedicalSupply", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int?>("BrandId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("smallmoney");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("MedicalSupplyGroupId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("MedicalSupplyProfileId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("smallmoney");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MedicalSupplyGroupId");

                    b.HasIndex("MedicalSupplyProfileId");

                    b.HasIndex("UnitId");

                    b.ToTable("MedicalSupplies");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.MedicalSupplyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("MedicalSupplyGroups");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.MedicalSupplyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("MedicalSupplyProfiles");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.RefDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("ForeignPrice")
                        .HasColumnType("smallmoney");

                    b.Property<string>("MedicalSupplyCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<decimal>("PriceInBaseCurr")
                        .HasColumnType("smallmoney");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("smallmoney");

                    b.Property<int>("RefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalSupplyCode");

                    b.ToTable("RefDetails");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Appointment", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.FamilyPlanning.Counselor", "Counselor")
                        .WithMany()
                        .HasForeignKey("CounselorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_NompiloPhc.Models.Patient", null)
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");

                    b.HasOne("E_NompiloPhc.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counselor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.CounselingRequestModel", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Patient", null)
                        .WithMany("CounselingRequests")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.FamilyPlanning.FertilityData", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Patient", "Patient")
                        .WithMany("FertilityTrackings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.Anthropometry", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("Anthropometry")
                        .HasForeignKey("E_NompiloPhc.Models.Nutrition.Anthropometry", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.Biochemicals", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("Biochemicals")
                        .HasForeignKey("E_NompiloPhc.Models.Nutrition.Biochemicals", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.DietaryInfo", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("DietaryInfo")
                        .HasForeignKey("E_NompiloPhc.Models.Nutrition.DietaryInfo", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.FamilyH", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("FamilyHistory")
                        .HasForeignKey("E_NompiloPhc.Models.Nutrition.FamilyH", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.FoodExchange", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("FoodExchange")
                        .HasForeignKey("E_NompiloPhc.Models.Nutrition.FoodExchange", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.MacroNutrients", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("MacroNutrients")
                        .HasForeignKey("E_NompiloPhc.Models.Nutrition.MacroNutrients", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.MedicalH", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("MedicalH")
                        .HasForeignKey("E_NompiloPhc.Models.Nutrition.MedicalH", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.Screening", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("Screening")
                        .HasForeignKey("E_NompiloPhc.Models.Nutrition.Screening", "PatientInfoID");

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.Screening2", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithMany()
                        .HasForeignKey("PatientInfoID");

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.SGA", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("SGA")
                        .HasForeignKey("E_NompiloPhc.Models.Nutrition.SGA", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.SocialH", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("SocialHistory")
                        .HasForeignKey("E_NompiloPhc.Models.Nutrition.SocialH", "PatientInfoID");

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.Currency", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Referrals.Currency", "Currencies")
                        .WithMany()
                        .HasForeignKey("ExchangeCurrencyId");

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.MedicalSupply", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Referrals.Brand", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_NompiloPhc.Models.Referrals.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_NompiloPhc.Models.Referrals.MedicalSupplyGroup", "MedicalSupplyGroups")
                        .WithMany()
                        .HasForeignKey("MedicalSupplyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_NompiloPhc.Models.Referrals.MedicalSupplyProfile", "MedicalSupplyProfiles")
                        .WithMany()
                        .HasForeignKey("MedicalSupplyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_NompiloPhc.Models.Referrals.Unit", "Units")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");

                    b.Navigation("Categories");

                    b.Navigation("MedicalSupplyGroups");

                    b.Navigation("MedicalSupplyProfiles");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Referrals.RefDetail", b =>
                {
                    b.HasOne("E_NompiloPhc.Models.Referrals.MedicalSupply", "MedicalSupply")
                        .WithMany()
                        .HasForeignKey("MedicalSupplyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalSupply");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_NompiloPhc.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_NompiloPhc.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_NompiloPhc.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_NompiloPhc.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Nutrition.PatientInfo", b =>
                {
                    b.Navigation("Anthropometry");

                    b.Navigation("Biochemicals");

                    b.Navigation("DietaryInfo");

                    b.Navigation("FamilyHistory");

                    b.Navigation("FoodExchange");

                    b.Navigation("MacroNutrients");

                    b.Navigation("MedicalH");

                    b.Navigation("SGA");

                    b.Navigation("Screening");

                    b.Navigation("SocialHistory");
                });

            modelBuilder.Entity("E_NompiloPhc.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CounselingRequests");

                    b.Navigation("FertilityTrackings");
                });
#pragma warning restore 612, 618
        }
    }
}
